{"ast":null,"code":"var _jsxFileName = \"/Users/billy.moore/Desktop/Programming/typescript-todo/src/components/NewTodo.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewTodo = props => {\n  _s();\n\n  //! must be explicit about what type of ref we are working with. ref = useRef() ins't enough\n  //? userRef is a generic type out of the box. Angled Brackets add specifics\n  //? initial useRef value must be null/undefined\n  const todoTextInputRef = useRef(null); //! React.FormEvent is a default event for Form submission\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredText = todoTextInputRef.current.value;\n\n    if ((enteredText === null || enteredText === void 0 ? void 0 : enteredText.trim().length) === 0) {\n      // throw error\n      return;\n    }\n\n    props.onAddTodo(enteredText);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"text\",\n      children: \"Todo text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"text\",\n      ref: todoTextInputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NewTodo, \"1sC+Y33RgTD/2YiEPp+XilOCiTo=\");\n\n_c = NewTodo;\nexport default NewTodo;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTodo\");","map":{"version":3,"sources":["/Users/billy.moore/Desktop/Programming/typescript-todo/src/components/NewTodo.tsx"],"names":["useRef","NewTodo","props","todoTextInputRef","submitHandler","event","preventDefault","enteredText","current","value","trim","length","onAddTodo"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,OAAvB;;;AAEA,MAAMC,OAAyD,GAAKC,KAAF,IAAa;AAAA;;AAC3E;AACA;AACA;AACA,QAAMC,gBAAgB,GAAGH,MAAM,CAAoB,IAApB,CAA/B,CAJ2E,CAM3E;;AACA,QAAMI,aAAa,GAAKC,KAAF,IAA8B;AAChDA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,WAAW,GAAGJ,gBAAgB,CAACK,OAAjB,CAA0BC,KAA9C;;AAEA,QAAK,CAAAF,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEG,IAAb,GAAoBC,MAApB,MAA+B,CAApC,EAAsC;AAClC;AACA;AACH;;AAEDT,IAAAA,KAAK,CAACU,SAAN,CAAgBL,WAAhB;AACH,GAXD;;AAaA,sBACI;AAAM,IAAA,QAAQ,EAAGH,aAAjB;AAAA,4BACI;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,MAAtB;AAA6B,MAAA,GAAG,EAAGD;AAAnC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA3BD;;GAAMF,O;;KAAAA,O;AA6BN,eAAeA,OAAf","sourcesContent":["import { useRef } from 'react'\n\nconst NewTodo: React.FC <{ onAddTodo: (text: string) => void }> = ( props ) => {\n    //! must be explicit about what type of ref we are working with. ref = useRef() ins't enough\n    //? userRef is a generic type out of the box. Angled Brackets add specifics\n    //? initial useRef value must be null/undefined\n    const todoTextInputRef = useRef<HTMLInputElement>( null )\n\n    //! React.FormEvent is a default event for Form submission\n    const submitHandler = ( event: React.FormEvent ) => {\n        event.preventDefault()\n\n        const enteredText = todoTextInputRef.current!.value\n\n        if ( enteredText?.trim().length === 0){\n            // throw error\n            return\n        }\n\n        props.onAddTodo(enteredText)\n    }\n\n    return(\n        <form onSubmit={ submitHandler }>\n            <label htmlFor=\"text\">Todo text</label>\n            <input type='text' id='text' ref={ todoTextInputRef }/>\n            <button>Add Todo</button>\n        </form>\n    )\n}\n\nexport default NewTodo"]},"metadata":{},"sourceType":"module"}